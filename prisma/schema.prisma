// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  name                String
  email               String          @unique
  role                String          @default("user")
  password            String?
  createdAt           DateTime        @default(now())
  resetPasswordToken  String?
  resetPasswordExpire DateTime?
  authProvider        AuthProvider[]
  Subscription        Subscription?
  ProfilePicture      ProfilePicture?
  Interview           Interview[]
}

model ProfilePicture {
  id     String  @id @default(uuid())
  userId String  @unique
  urlId  String?
  url    String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthProvider {
  id         String       @id @default(uuid())
  userId     String
  provider   ProviderName
  providerId String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String    @id @default(uuid())
  userId             String    @unique
  customerId         String
  created            DateTime  @default(now())
  status             String
  startDate          DateTime
  currentPeriodEnd   DateTime
  nextPaymentAttempt DateTime?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProviderName {
  google
  github
  credentials
}

model Interview {
  id             String   @id @default(uuid())
  userId         String
  industry       String
  type           String
  topic          String
  role           String
  numOfQuestions Int
  answered       Int      @default(0)
  difficulty     String
  duration       Int
  durationLeft   Int      @default(0)
  status         String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Question Question[]
}

model Question {
  id          String   @id @default(uuid())
  interviewId String
  question    String
  answer      String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  result    Result?
}

model Result {
  id           String @id @default(uuid())
  questionId   String @unique
  overallScore Int    @default(0)
  clarity      Int    @default(0)
  completeness Int    @default(0)
  relevance    Int    @default(0)
  suggestion   String @default("")

  Question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
